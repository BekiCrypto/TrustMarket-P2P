rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching auth UID can create their profile.
     * @allow (get, update, delete) User with matching auth UID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) Listing of user documents is not allowed.
     * @principle Enforces document ownership for writes, restricts listing for privacy.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access control for listings created by a user.
     * @path /users/{userId}/listings/{listingId}
     * @allow (create) User with matching auth UID can create a listing under their profile.
     * @allow (get, update, delete) User with matching auth UID can read, update, and delete their own listings.
     * @deny (create) User cannot create a listing under another user's profile.
     * @deny (list) Only the owner can list their own listings.
     * @principle Enforces document ownership for writes, restricts listing for privacy.
     */
    match /users/{userId}/listings/{listingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access control for trades between buyers and sellers.
     * @path /trades/{tradeId}
     * @allow (get, list) Any authenticated user can read trade information.
     * @allow (create) Any authenticated user can create a trade.
     * @allow (update, delete) Only the buyer or seller can update or delete a trade.
     * @deny (update, delete) A user who is neither the buyer nor the seller cannot modify the trade.
     * @principle Enforces shared access based on buyerId and sellerId.
     */
    match /trades/{tradeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isBuyerOrSeller(buyerId, sellerId) {
        return isSignedIn() && (request.auth.uid == buyerId || request.auth.uid == sellerId);
      }

      function isExistingBuyerOrSeller(buyerId, sellerId) {
        return isSignedIn() && (request.auth.uid == buyerId || request.auth.uid == sellerId) && exists(resource);
      }

      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.buyerId || request.auth.uid == resource.data.sellerId);
    }

    /**
     * @description Manages access control for escrow contracts.
     * @path /escrowContracts/{escrowContractId}
     * @allow (get, list) Any user can read escrow contract details.
     * @deny (create, update, delete) No user can create, update, or delete escrow contracts through the client.
     * @principle Allows public read access, denies all write access.
     */
    match /escrowContracts/{escrowContractId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages access control for disputes.
     * @path /disputes/{disputeId}
     * @allow (get, list) Any authenticated user can read dispute information.
     * @allow (create) Any authenticated user can create a dispute.
     * @allow (update, delete) Only the filer, buyer, or seller can update or delete a dispute.
     * @deny (update, delete) A user who is not the filer, buyer, or seller cannot modify the dispute.
     * @principle Enforces shared access based on filerId, buyerId, and sellerId.
     */
    match /disputes/{disputeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isFilerBuyerOrSeller(filerId, tradeId) {
         return isSignedIn() && (request.auth.uid == filerId || get(/databases/$(database)/documents/trades/$(tradeId)).data.buyerId == request.auth.uid || get(/databases/$(database)/documents/trades/$(tradeId)).data.sellerId == request.auth.uid);
      }

       function isExistingFilerBuyerOrSeller(filerId, tradeId) {
        return isFilerBuyerOrSeller(filerId, tradeId) && exists(resource);
      }


      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (request.auth.uid == resource.data.filerId || get(/databases/$(database)/documents/trades/$(resource.data.tradeId)).data.buyerId == request.auth.uid || get(/databases/$(database)/documents/trades/$(resource.data.tradeId)).data.sellerId == request.auth.uid);
      allow delete: if isSignedIn() && (request.auth.uid == resource.data.filerId || get(/databases/$(database)/documents/trades/$(resource.data.tradeId)).data.buyerId == request.auth.uid || get(/databases/$(database)/documents/trades/$(resource.data.tradeId)).data.sellerId == request.auth.uid);
    }
  }
}