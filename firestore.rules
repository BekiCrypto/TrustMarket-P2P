/**
 * @fileoverview Firestore Security Rules for P2P TrustMarket.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for private user data and utilizes denormalization
 * to enable efficient and secure authorization checks. The rules are designed to prevent unauthorized
 * data access and modification, ensuring that users can only access and modify their own data or data
 * explicitly shared with them.
 *
 * Data Structure:
 * - /users/{userId}: Stores private user profile data. Access is restricted to the owner.
 * - /users/{userId}/listings/{listingId}: Stores listings created by a specific user. Access is restricted to the owner.
 * - /trades/{tradeId}: Stores trade data. Access is controlled based on buyerId and sellerId.
 * - /escrowContracts/{escrowContractId}: Stores escrow contract details.
 * - /disputes/{disputeId}: Stores dispute data. Access is controlled based on filerId, buyerId, and sellerId (via trades).
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own user documents.
 * - Users can only manage listings under their user document.
 * - Trades can only be accessed by the buyer and seller.
 * - List operations on user-scoped collections are restricted to the owner.
 *
 * Denormalization for Authorization:
 * - Listings include the sellerId field to allow direct access control based on the listing owner.
 * - Trades include both buyerId and sellerId to enable rules without complex get() calls.
 * - Disputes include the filerId and, implicitly through the trade, the buyerId and sellerId for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the user can read, write, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document with id 'user_abc'.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can get, list, update and delete their profile document with id 'user_abc'.
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot create, get, list, update, or delete the profile document with id 'user_abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to listings created by a specific user. Only the user can create, read, write, update, or delete their own listings.
     * @path /users/{userId}/listings/{listingId}
     * @allow (create) - User with UID 'user_abc' can create a listing under /users/user_abc/listings/listing_123 with sellerId 'user_abc'.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can get, list, update and delete the listing under /users/user_abc/listings/listing_123 where sellerId is 'user_abc'.
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot create, get, list, update, or delete the listing under /users/user_abc/listings/listing_123.
     * @principle Enforces document ownership for listings and validates relational integrity.
     */
    match /users/{userId}/listings/{listingId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow get: if isSignedIn() && request.auth.uid == userId;
      allow list: if false;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Controls access to trade data. Only the buyer and seller can read and write trade data.
     * @path /trades/{tradeId}
     * @allow (get) - User with UID 'user_abc' can get trade data where buyerId or sellerId is 'user_abc'.
     * @allow (list) - Listing is not allowed.
     * @allow (create, update, delete) - NOT allowed
     * @deny (get) - User with UID 'user_xyz' cannot get trade data where neither buyerId nor sellerId is 'user_xyz'.
     * @principle Enforces shared access based on the buyerId and sellerId fields.
     */
    match /trades/{tradeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(trade) {
        return isSignedIn() && (trade.buyerId == request.auth.uid || trade.sellerId == request.auth.uid);
      }

      allow get: if isParticipant(resource.data);
      allow list: if false;
      allow create: if false;
      allow update: if isParticipant(request.resource.data);
      allow delete: if false;
    }

    /**
     * @description Controls access to escrow contract details.
     * @path /escrowContracts/{escrowContractId}
     * @allow (get, list) - Public read access.
     * @allow (create, update, delete) - NOT Allowed
     */
    match /escrowContracts/{escrowContractId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to dispute data.
     * @path /disputes/{disputeId}
     *  @allow (get) -  Authenticated user can get dispute data if the user's id matches the filerId, buyerId or sellerId
     * @allow (list) - Listing is not allowed.
     * @allow (create, update, delete) - NOT allowed
     */
    match /disputes/{disputeId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function getTrade(tradeId) {
        return get(/databases/$(database)/documents/trades/$(tradeId)).data
      }

      function isParticipant(dispute) {
          let trade = getTrade(dispute.tradeId);
          return isSignedIn() && (dispute.filerId == request.auth.uid || trade.buyerId == request.auth.uid || trade.sellerId == request.auth.uid);
      }


      allow get: if isParticipant(resource.data);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}